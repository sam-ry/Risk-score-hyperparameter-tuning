{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9341109,"sourceType":"datasetVersion","datasetId":5660999}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:37:18.923869Z","iopub.execute_input":"2025-05-04T10:37:18.924644Z","iopub.status.idle":"2025-05-04T10:37:20.705202Z","shell.execute_reply.started":"2025-05-04T10:37:18.924573Z","shell.execute_reply":"2025-05-04T10:37:20.703797Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/financial-risk-for-loan-approval/Loan.csv')\ndata = df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:37:38.859811Z","iopub.execute_input":"2025-05-04T10:37:38.860238Z","iopub.status.idle":"2025-05-04T10:37:39.163218Z","shell.execute_reply.started":"2025-05-04T10:37:38.860205Z","shell.execute_reply":"2025-05-04T10:37:39.161110Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"print(data.info())\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:38:40.888418Z","iopub.execute_input":"2025-05-04T10:38:40.889162Z","iopub.status.idle":"2025-05-04T10:38:40.958393Z","shell.execute_reply.started":"2025-05-04T10:38:40.889115Z","shell.execute_reply":"2025-05-04T10:38:40.957192Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 20000 entries, 0 to 19999\nData columns (total 36 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   ApplicationDate             20000 non-null  object \n 1   Age                         20000 non-null  int64  \n 2   AnnualIncome                20000 non-null  int64  \n 3   CreditScore                 20000 non-null  int64  \n 4   EmploymentStatus            20000 non-null  object \n 5   EducationLevel              20000 non-null  object \n 6   Experience                  20000 non-null  int64  \n 7   LoanAmount                  20000 non-null  int64  \n 8   LoanDuration                20000 non-null  int64  \n 9   MaritalStatus               20000 non-null  object \n 10  NumberOfDependents          20000 non-null  int64  \n 11  HomeOwnershipStatus         20000 non-null  object \n 12  MonthlyDebtPayments         20000 non-null  int64  \n 13  CreditCardUtilizationRate   20000 non-null  float64\n 14  NumberOfOpenCreditLines     20000 non-null  int64  \n 15  NumberOfCreditInquiries     20000 non-null  int64  \n 16  DebtToIncomeRatio           20000 non-null  float64\n 17  BankruptcyHistory           20000 non-null  int64  \n 18  LoanPurpose                 20000 non-null  object \n 19  PreviousLoanDefaults        20000 non-null  int64  \n 20  PaymentHistory              20000 non-null  int64  \n 21  LengthOfCreditHistory       20000 non-null  int64  \n 22  SavingsAccountBalance       20000 non-null  int64  \n 23  CheckingAccountBalance      20000 non-null  int64  \n 24  TotalAssets                 20000 non-null  int64  \n 25  TotalLiabilities            20000 non-null  int64  \n 26  MonthlyIncome               20000 non-null  float64\n 27  UtilityBillsPaymentHistory  20000 non-null  float64\n 28  JobTenure                   20000 non-null  int64  \n 29  NetWorth                    20000 non-null  int64  \n 30  BaseInterestRate            20000 non-null  float64\n 31  InterestRate                20000 non-null  float64\n 32  MonthlyLoanPayment          20000 non-null  float64\n 33  TotalDebtToIncomeRatio      20000 non-null  float64\n 34  LoanApproved                20000 non-null  int64  \n 35  RiskScore                   20000 non-null  float64\ndtypes: float64(9), int64(21), object(6)\nmemory usage: 5.5+ MB\nNone\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"  ApplicationDate  Age  AnnualIncome  CreditScore EmploymentStatus  \\\n0      2018-01-01   45         39948          617         Employed   \n1      2018-01-02   38         39709          628         Employed   \n2      2018-01-03   47         40724          570         Employed   \n3      2018-01-04   58         69084          545         Employed   \n4      2018-01-05   37        103264          594         Employed   \n\n  EducationLevel  Experience  LoanAmount  LoanDuration MaritalStatus  ...  \\\n0         Master          22       13152            48       Married  ...   \n1      Associate          15       26045            48        Single  ...   \n2       Bachelor          26       17627            36       Married  ...   \n3    High School          34       37898            96        Single  ...   \n4      Associate          17        9184            36       Married  ...   \n\n   MonthlyIncome UtilityBillsPaymentHistory  JobTenure  NetWorth  \\\n0    3329.000000                   0.724972         11    126928   \n1    3309.083333                   0.935132          3     43609   \n2    3393.666667                   0.872241          6      5205   \n3    5757.000000                   0.896155          5     99452   \n4    8605.333333                   0.941369          5    227019   \n\n   BaseInterestRate  InterestRate  MonthlyLoanPayment  TotalDebtToIncomeRatio  \\\n0          0.199652      0.227590          419.805992                0.181077   \n1          0.207045      0.201077          794.054238                0.389852   \n2          0.217627      0.212548          666.406688                0.462157   \n3          0.300398      0.300911         1047.506980                0.313098   \n4          0.197184      0.175990          330.179140                0.070210   \n\n  LoanApproved  RiskScore  \n0            0       49.0  \n1            0       52.0  \n2            0       52.0  \n3            0       54.0  \n4            1       36.0  \n\n[5 rows x 36 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ApplicationDate</th>\n      <th>Age</th>\n      <th>AnnualIncome</th>\n      <th>CreditScore</th>\n      <th>EmploymentStatus</th>\n      <th>EducationLevel</th>\n      <th>Experience</th>\n      <th>LoanAmount</th>\n      <th>LoanDuration</th>\n      <th>MaritalStatus</th>\n      <th>...</th>\n      <th>MonthlyIncome</th>\n      <th>UtilityBillsPaymentHistory</th>\n      <th>JobTenure</th>\n      <th>NetWorth</th>\n      <th>BaseInterestRate</th>\n      <th>InterestRate</th>\n      <th>MonthlyLoanPayment</th>\n      <th>TotalDebtToIncomeRatio</th>\n      <th>LoanApproved</th>\n      <th>RiskScore</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-01-01</td>\n      <td>45</td>\n      <td>39948</td>\n      <td>617</td>\n      <td>Employed</td>\n      <td>Master</td>\n      <td>22</td>\n      <td>13152</td>\n      <td>48</td>\n      <td>Married</td>\n      <td>...</td>\n      <td>3329.000000</td>\n      <td>0.724972</td>\n      <td>11</td>\n      <td>126928</td>\n      <td>0.199652</td>\n      <td>0.227590</td>\n      <td>419.805992</td>\n      <td>0.181077</td>\n      <td>0</td>\n      <td>49.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-01-02</td>\n      <td>38</td>\n      <td>39709</td>\n      <td>628</td>\n      <td>Employed</td>\n      <td>Associate</td>\n      <td>15</td>\n      <td>26045</td>\n      <td>48</td>\n      <td>Single</td>\n      <td>...</td>\n      <td>3309.083333</td>\n      <td>0.935132</td>\n      <td>3</td>\n      <td>43609</td>\n      <td>0.207045</td>\n      <td>0.201077</td>\n      <td>794.054238</td>\n      <td>0.389852</td>\n      <td>0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-01-03</td>\n      <td>47</td>\n      <td>40724</td>\n      <td>570</td>\n      <td>Employed</td>\n      <td>Bachelor</td>\n      <td>26</td>\n      <td>17627</td>\n      <td>36</td>\n      <td>Married</td>\n      <td>...</td>\n      <td>3393.666667</td>\n      <td>0.872241</td>\n      <td>6</td>\n      <td>5205</td>\n      <td>0.217627</td>\n      <td>0.212548</td>\n      <td>666.406688</td>\n      <td>0.462157</td>\n      <td>0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2018-01-04</td>\n      <td>58</td>\n      <td>69084</td>\n      <td>545</td>\n      <td>Employed</td>\n      <td>High School</td>\n      <td>34</td>\n      <td>37898</td>\n      <td>96</td>\n      <td>Single</td>\n      <td>...</td>\n      <td>5757.000000</td>\n      <td>0.896155</td>\n      <td>5</td>\n      <td>99452</td>\n      <td>0.300398</td>\n      <td>0.300911</td>\n      <td>1047.506980</td>\n      <td>0.313098</td>\n      <td>0</td>\n      <td>54.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2018-01-05</td>\n      <td>37</td>\n      <td>103264</td>\n      <td>594</td>\n      <td>Employed</td>\n      <td>Associate</td>\n      <td>17</td>\n      <td>9184</td>\n      <td>36</td>\n      <td>Married</td>\n      <td>...</td>\n      <td>8605.333333</td>\n      <td>0.941369</td>\n      <td>5</td>\n      <td>227019</td>\n      <td>0.197184</td>\n      <td>0.175990</td>\n      <td>330.179140</td>\n      <td>0.070210</td>\n      <td>1</td>\n      <td>36.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 36 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"data.drop(columns='ApplicationDate', inplace=True)\nx=data.select_dtypes('object')\nx","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:43:50.157414Z","iopub.execute_input":"2025-05-04T10:43:50.157759Z","iopub.status.idle":"2025-05-04T10:43:50.178404Z","shell.execute_reply.started":"2025-05-04T10:43:50.157733Z","shell.execute_reply":"2025-05-04T10:43:50.176510Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"      EmploymentStatus EducationLevel MaritalStatus HomeOwnershipStatus  \\\n0             Employed         Master       Married                 Own   \n1             Employed      Associate        Single            Mortgage   \n2             Employed       Bachelor       Married                Rent   \n3             Employed    High School        Single            Mortgage   \n4             Employed      Associate       Married            Mortgage   \n...                ...            ...           ...                 ...   \n19995         Employed    High School       Married                Rent   \n19996         Employed      Associate       Married                Rent   \n19997         Employed       Bachelor       Married            Mortgage   \n19998         Employed    High School       Married                 Own   \n19999         Employed      Associate       Married                 Own   \n\n              LoanPurpose  \n0                    Home  \n1      Debt Consolidation  \n2               Education  \n3                    Home  \n4      Debt Consolidation  \n...                   ...  \n19995                Auto  \n19996  Debt Consolidation  \n19997                Home  \n19998  Debt Consolidation  \n19999               Other  \n\n[20000 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>EmploymentStatus</th>\n      <th>EducationLevel</th>\n      <th>MaritalStatus</th>\n      <th>HomeOwnershipStatus</th>\n      <th>LoanPurpose</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Employed</td>\n      <td>Master</td>\n      <td>Married</td>\n      <td>Own</td>\n      <td>Home</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Employed</td>\n      <td>Associate</td>\n      <td>Single</td>\n      <td>Mortgage</td>\n      <td>Debt Consolidation</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Employed</td>\n      <td>Bachelor</td>\n      <td>Married</td>\n      <td>Rent</td>\n      <td>Education</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Employed</td>\n      <td>High School</td>\n      <td>Single</td>\n      <td>Mortgage</td>\n      <td>Home</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Employed</td>\n      <td>Associate</td>\n      <td>Married</td>\n      <td>Mortgage</td>\n      <td>Debt Consolidation</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>19995</th>\n      <td>Employed</td>\n      <td>High School</td>\n      <td>Married</td>\n      <td>Rent</td>\n      <td>Auto</td>\n    </tr>\n    <tr>\n      <th>19996</th>\n      <td>Employed</td>\n      <td>Associate</td>\n      <td>Married</td>\n      <td>Rent</td>\n      <td>Debt Consolidation</td>\n    </tr>\n    <tr>\n      <th>19997</th>\n      <td>Employed</td>\n      <td>Bachelor</td>\n      <td>Married</td>\n      <td>Mortgage</td>\n      <td>Home</td>\n    </tr>\n    <tr>\n      <th>19998</th>\n      <td>Employed</td>\n      <td>High School</td>\n      <td>Married</td>\n      <td>Own</td>\n      <td>Debt Consolidation</td>\n    </tr>\n    <tr>\n      <th>19999</th>\n      <td>Employed</td>\n      <td>Associate</td>\n      <td>Married</td>\n      <td>Own</td>\n      <td>Other</td>\n    </tr>\n  </tbody>\n</table>\n<p>20000 rows × 5 columns</p>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"y={}\nfor i in x.columns:\n    y[i]=x[i].value_counts()\nprint(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:46:30.509311Z","iopub.execute_input":"2025-05-04T10:46:30.510191Z","iopub.status.idle":"2025-05-04T10:46:30.534976Z","shell.execute_reply.started":"2025-05-04T10:46:30.510124Z","shell.execute_reply":"2025-05-04T10:46:30.533622Z"}},"outputs":[{"name":"stdout","text":"{'EmploymentStatus': EmploymentStatus\nEmployed         17036\nSelf-Employed     1573\nUnemployed        1391\nName: count, dtype: int64, 'EducationLevel': EducationLevel\nBachelor       6054\nHigh School    5908\nAssociate      4034\nMaster         3050\nDoctorate       954\nName: count, dtype: int64, 'MaritalStatus': MaritalStatus\nMarried     10041\nSingle       6078\nDivorced     2882\nWidowed       999\nName: count, dtype: int64, 'HomeOwnershipStatus': HomeOwnershipStatus\nMortgage    7939\nRent        6087\nOwn         3938\nOther       2036\nName: count, dtype: int64, 'LoanPurpose': LoanPurpose\nHome                  5925\nDebt Consolidation    5027\nAuto                  4034\nEducation             3008\nOther                 2006\nName: count, dtype: int64}\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n# labels={}\nfor col in x:\n    le=LabelEncoder()\n    data[col]=le.fit_transform(data[col])\n    # labels[col]=le\n# labels['EmploymentStatus']\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:52:55.179725Z","iopub.execute_input":"2025-05-04T10:52:55.180324Z","iopub.status.idle":"2025-05-04T10:52:55.233117Z","shell.execute_reply.started":"2025-05-04T10:52:55.180283Z","shell.execute_reply":"2025-05-04T10:52:55.227944Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   Age  AnnualIncome  CreditScore  EmploymentStatus  EducationLevel  \\\n0   45         39948          617                 0               4   \n1   38         39709          628                 0               0   \n2   47         40724          570                 0               1   \n3   58         69084          545                 0               3   \n4   37        103264          594                 0               0   \n\n   Experience  LoanAmount  LoanDuration  MaritalStatus  NumberOfDependents  \\\n0          22       13152            48              1                   2   \n1          15       26045            48              2                   1   \n2          26       17627            36              1                   2   \n3          34       37898            96              2                   1   \n4          17        9184            36              1                   1   \n\n   ...  MonthlyIncome  UtilityBillsPaymentHistory  JobTenure  NetWorth  \\\n0  ...    3329.000000                    0.724972         11    126928   \n1  ...    3309.083333                    0.935132          3     43609   \n2  ...    3393.666667                    0.872241          6      5205   \n3  ...    5757.000000                    0.896155          5     99452   \n4  ...    8605.333333                    0.941369          5    227019   \n\n   BaseInterestRate  InterestRate  MonthlyLoanPayment  TotalDebtToIncomeRatio  \\\n0          0.199652      0.227590          419.805992                0.181077   \n1          0.207045      0.201077          794.054238                0.389852   \n2          0.217627      0.212548          666.406688                0.462157   \n3          0.300398      0.300911         1047.506980                0.313098   \n4          0.197184      0.175990          330.179140                0.070210   \n\n   LoanApproved  RiskScore  \n0             0       49.0  \n1             0       52.0  \n2             0       52.0  \n3             0       54.0  \n4             1       36.0  \n\n[5 rows x 35 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>AnnualIncome</th>\n      <th>CreditScore</th>\n      <th>EmploymentStatus</th>\n      <th>EducationLevel</th>\n      <th>Experience</th>\n      <th>LoanAmount</th>\n      <th>LoanDuration</th>\n      <th>MaritalStatus</th>\n      <th>NumberOfDependents</th>\n      <th>...</th>\n      <th>MonthlyIncome</th>\n      <th>UtilityBillsPaymentHistory</th>\n      <th>JobTenure</th>\n      <th>NetWorth</th>\n      <th>BaseInterestRate</th>\n      <th>InterestRate</th>\n      <th>MonthlyLoanPayment</th>\n      <th>TotalDebtToIncomeRatio</th>\n      <th>LoanApproved</th>\n      <th>RiskScore</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>45</td>\n      <td>39948</td>\n      <td>617</td>\n      <td>0</td>\n      <td>4</td>\n      <td>22</td>\n      <td>13152</td>\n      <td>48</td>\n      <td>1</td>\n      <td>2</td>\n      <td>...</td>\n      <td>3329.000000</td>\n      <td>0.724972</td>\n      <td>11</td>\n      <td>126928</td>\n      <td>0.199652</td>\n      <td>0.227590</td>\n      <td>419.805992</td>\n      <td>0.181077</td>\n      <td>0</td>\n      <td>49.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>38</td>\n      <td>39709</td>\n      <td>628</td>\n      <td>0</td>\n      <td>0</td>\n      <td>15</td>\n      <td>26045</td>\n      <td>48</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>3309.083333</td>\n      <td>0.935132</td>\n      <td>3</td>\n      <td>43609</td>\n      <td>0.207045</td>\n      <td>0.201077</td>\n      <td>794.054238</td>\n      <td>0.389852</td>\n      <td>0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>47</td>\n      <td>40724</td>\n      <td>570</td>\n      <td>0</td>\n      <td>1</td>\n      <td>26</td>\n      <td>17627</td>\n      <td>36</td>\n      <td>1</td>\n      <td>2</td>\n      <td>...</td>\n      <td>3393.666667</td>\n      <td>0.872241</td>\n      <td>6</td>\n      <td>5205</td>\n      <td>0.217627</td>\n      <td>0.212548</td>\n      <td>666.406688</td>\n      <td>0.462157</td>\n      <td>0</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>58</td>\n      <td>69084</td>\n      <td>545</td>\n      <td>0</td>\n      <td>3</td>\n      <td>34</td>\n      <td>37898</td>\n      <td>96</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>5757.000000</td>\n      <td>0.896155</td>\n      <td>5</td>\n      <td>99452</td>\n      <td>0.300398</td>\n      <td>0.300911</td>\n      <td>1047.506980</td>\n      <td>0.313098</td>\n      <td>0</td>\n      <td>54.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>37</td>\n      <td>103264</td>\n      <td>594</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17</td>\n      <td>9184</td>\n      <td>36</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>8605.333333</td>\n      <td>0.941369</td>\n      <td>5</td>\n      <td>227019</td>\n      <td>0.197184</td>\n      <td>0.175990</td>\n      <td>330.179140</td>\n      <td>0.070210</td>\n      <td>1</td>\n      <td>36.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 35 columns</p>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"# data.info()\ncorr=data.corr()['RiskScore']\ncorr.sort_values(ascending=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T10:55:59.602158Z","iopub.execute_input":"2025-05-04T10:55:59.602510Z","iopub.status.idle":"2025-05-04T10:55:59.689005Z","shell.execute_reply.started":"2025-05-04T10:55:59.602483Z","shell.execute_reply":"2025-05-04T10:55:59.687920Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"RiskScore                     1.000000\nBankruptcyHistory             0.377578\nTotalDebtToIncomeRatio        0.342643\nDebtToIncomeRatio             0.326500\nInterestRate                  0.268203\nPreviousLoanDefaults          0.258659\nBaseInterestRate              0.256233\nLoanAmount                    0.137981\nEmploymentStatus              0.132964\nMonthlyLoanPayment            0.115501\nCreditCardUtilizationRate     0.108758\nTotalLiabilities              0.055617\nLoanDuration                  0.054550\nMonthlyDebtPayments           0.036938\nMaritalStatus                 0.016824\nNumberOfOpenCreditLines       0.007762\nLoanPurpose                   0.005521\nHomeOwnershipStatus           0.004454\nNumberOfCreditInquiries       0.003103\nSavingsAccountBalance         0.002190\nNumberOfDependents            0.001686\nCheckingAccountBalance       -0.004044\nJobTenure                    -0.004393\nUtilityBillsPaymentHistory   -0.005196\nPaymentHistory               -0.016992\nEducationLevel               -0.017034\nAge                          -0.164304\nExperience                   -0.166496\nLengthOfCreditHistory        -0.177796\nCreditScore                  -0.240198\nTotalAssets                  -0.297117\nNetWorth                     -0.304333\nAnnualIncome                 -0.483289\nMonthlyIncome                -0.487039\nLoanApproved                 -0.766137\nName: RiskScore, dtype: float64"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"thr=0.3\ncor=corr[corr.abs()>thr].index\ncor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T11:05:36.794205Z","iopub.execute_input":"2025-05-04T11:05:36.794582Z","iopub.status.idle":"2025-05-04T11:05:36.804156Z","shell.execute_reply.started":"2025-05-04T11:05:36.794548Z","shell.execute_reply":"2025-05-04T11:05:36.802278Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"Index(['AnnualIncome', 'DebtToIncomeRatio', 'BankruptcyHistory',\n       'MonthlyIncome', 'NetWorth', 'TotalDebtToIncomeRatio', 'LoanApproved',\n       'RiskScore'],\n      dtype='object')"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n# from sklearn.linear_model import Ridge, Lasso, ElasticNet","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T11:02:28.029285Z","iopub.execute_input":"2025-05-04T11:02:28.029973Z","iopub.status.idle":"2025-05-04T11:02:29.096478Z","shell.execute_reply.started":"2025-05-04T11:02:28.029933Z","shell.execute_reply":"2025-05-04T11:02:29.095001Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"lr=LinearRegression()\nrf=RandomForestRegressor(random_state=42)\nxg=XGBRegressor(random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T11:26:41.444744Z","iopub.execute_input":"2025-05-04T11:26:41.445179Z","iopub.status.idle":"2025-05-04T11:26:41.453378Z","shell.execute_reply.started":"2025-05-04T11:26:41.445145Z","shell.execute_reply":"2025-05-04T11:26:41.452235Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"ndata=data[cor]\nndata.shape\nx=ndata.drop('RiskScore',axis=1)\ny=ndata['RiskScore']\nx_train, x_test=x[:16000], x[16000:]\ny_train, y_test=y[:16000], y[16000:]\nx_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T11:28:40.495246Z","iopub.execute_input":"2025-05-04T11:28:40.495711Z","iopub.status.idle":"2025-05-04T11:28:40.515746Z","shell.execute_reply.started":"2025-05-04T11:28:40.495665Z","shell.execute_reply":"2025-05-04T11:28:40.511663Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"(4000, 7)"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"lr.fit(x_train, y_train)\npred_lr=lr.predict(x_test)\nrf.fit(x_train, y_train)\npred_rf=rf.predict(x_test)\nxg.fit(x_train, y_train)\npred_xg=xg.predict(x_test)\n\nfrom sklearn.metrics import mean_squared_error\ndef eval(name, y_test, y_pred):\n    res=f'mse of {name}: {mean_squared_error(y_test, y_pred)}'\n    return res\nprint(eval('Linear', y_test, pred_lr))\nprint(eval('Random F', y_test, pred_rf))\nprint(eval('XGB', y_test, pred_xg))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T11:28:42.093894Z","iopub.execute_input":"2025-05-04T11:28:42.094322Z","iopub.status.idle":"2025-05-04T11:28:53.964142Z","shell.execute_reply.started":"2025-05-04T11:28:42.094289Z","shell.execute_reply":"2025-05-04T11:28:53.962812Z"}},"outputs":[{"name":"stdout","text":"mse of Linear: 10.07516973891062\nmse of Random F: 9.322669161\nmse of XGB: 9.170147684808994\n","output_type":"stream"}],"execution_count":51},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\nmodel_params = {\n    'Linear': {\n        'model': LinearRegression(),\n        'params': {\n            'fit_intercept': [True, False]\n            # 'normalize': [False],  # 'normalize' is deprecated in recent sklearn\n        }\n    },\n    'RandomForest': {\n        'model': RandomForestRegressor(),\n        'params': {\n            'n_estimators': [50, 100],\n            'max_depth': [None, 10]\n            # 'min_samples_split': [2, 5]\n            # 'min_samples_leaf': [1, 2]\n        }\n    },\n    'XGBoost': {\n        'model': XGBRegressor(),\n        'params': {\n            'n_estimators': [50, 100],\n            'max_depth': [3, 5]\n            # 'learning_rate': [0.01, 0.1, 0.2]\n            # 'subsample': [0.7, 1.0]\n        }\n    }\n}\n\nscores=[]\nfor model_name, mp in model_params.items():\n    clf=GridSearchCV(mp['model'], mp['params'], cv=3, scoring='neg_mean_squared_error')\n    clf.fit(x_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\nprint(scores)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T12:12:39.603447Z","iopub.execute_input":"2025-05-04T12:12:39.604257Z","iopub.status.idle":"2025-05-04T12:13:34.111261Z","shell.execute_reply.started":"2025-05-04T12:12:39.604199Z","shell.execute_reply":"2025-05-04T12:13:34.109905Z"}},"outputs":[{"name":"stdout","text":"[{'model': 'Linear', 'best_score': -10.32248473313793, 'best_params': {'fit_intercept': True}}, {'model': 'RandomForest', 'best_score': -8.753203115471651, 'best_params': {'max_depth': 10, 'n_estimators': 100}}, {'model': 'XGBoost', 'best_score': -8.549917632358785, 'best_params': {'max_depth': 3, 'n_estimators': 50}}]\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"score_df = pd.DataFrame(scores)\nscore_df['best_score'] = -score_df['best_score']\nscore_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-04T12:19:13.688667Z","iopub.execute_input":"2025-05-04T12:19:13.689072Z","iopub.status.idle":"2025-05-04T12:19:13.702099Z","shell.execute_reply.started":"2025-05-04T12:19:13.689039Z","shell.execute_reply":"2025-05-04T12:19:13.700916Z"}},"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"          model  best_score                             best_params\n0        Linear   10.322485                 {'fit_intercept': True}\n1  RandomForest    8.753203  {'max_depth': 10, 'n_estimators': 100}\n2       XGBoost    8.549918    {'max_depth': 3, 'n_estimators': 50}","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model</th>\n      <th>best_score</th>\n      <th>best_params</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Linear</td>\n      <td>10.322485</td>\n      <td>{'fit_intercept': True}</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>RandomForest</td>\n      <td>8.753203</td>\n      <td>{'max_depth': 10, 'n_estimators': 100}</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>XGBoost</td>\n      <td>8.549918</td>\n      <td>{'max_depth': 3, 'n_estimators': 50}</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":57},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}